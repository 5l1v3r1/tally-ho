<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Admin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css" type="text/css" />
    <link rel="stylesheet" href="https://unpkg.com/pell/dist/pell.min.css" type="text/css" />

    <style>
      .is-hidden {
        display: none;
      }

      #editor img {
        max-width: 200px !important;
      }

      #notification {
        max-width: 500px;
        z-index: 999;
        position: absolute;
        bottom: 1rem;
        right: 1rem;
      }
    </style>
  </head>
  <body>

    <nav class="navbar is-primary" role="navigation" aria-label="main navigation">
      <div class="container">
        <div class="navbar-brand h-app">
          <strong class="navbar-item p-name"><a class="u-url" href="{{ .AdminURL }}">tally-ho</a></strong>
        </div>
        <div class="navbar-menu">
          <div class="navbar-end">
            <span class="navbar-item">{{ .Micropub }}</span>
          </div>
        </div>
      </div>
    </nav>

    {{ if .SignedIn }}
      <section class="section">
        <div class="container block">
          <div class="tabs">
            <ul>
              <li class="is-active"><a href="#page">Page</a></li>
              <li><a href="#note">Note</a></li>
              <li><a href="#post">Post</a></li>
            </ul>
          </div>
        </div>

        <div id="page" class="container tabbed">
          <form method="post" action="{{ .Micropub }}" class="block">
            <div class="field">
              <label class="label" for="name">Page</label>
              <div class="control">
                <input class="input" name="name" id="name" />
              </div>
            </div>

            <input type="hidden" name="access_token" value="{{ .AccessToken }}" />
            <input type="hidden" name="action" value="hx-page" />

            <div class="field">
              <div class="control">
                <button class="button" type="submit">Set next page</button>
              </div>
            </div>
          </form>

          <article class="message">
            <div class="message-body content">
              <p>The current page is &ldquo;{{ .CurrentPage }}&rdquo;.</p>

              <p>This will only make sense if posting to a <strong>tally-ho</strong> instance.</p>
            </div>
          </article>
        </div>

        <div id="note" class="container tabbed">
          <form method="post" action="{{ .Micropub }}">
            <div class="field">
              <label class="label" for="content">Content</label>
              <div class="control">
                <textarea class="textarea" name="content" id="content"></textarea>
              </div>
            </div>

            <input type="hidden" name="access_token" value="{{ .AccessToken }}" />
            <input type="hidden" name="h" value="entry" />

            <div class="field">
              <div class="control">
                <button class="button" type="submit">Create new note</button>
              </div>
            </div>
          </form>
        </div>

        <div id="post" class="container tabbed">
          <form method="post" action="{{ .Micropub }}" id="editorform">
            <div class="field">
              <label class="label" for="name">Name</label>
              <div class="control">
                <input class="input" name="name" id="name" />
              </div>
            </div>

            <div class="field">
              <label class="label" for="post_content">Content</label>
              <div class="control content" id="editor">
                <input class="input is-hidden" name="content" id="post_content" />
              </div>
            </div>

            <input type="hidden" name="access_token" value="{{ .AccessToken }}" />
            <input type="hidden" name="h" value="entry" />

            <div class="field">
              <div class="control">
                <button class="button" type="submit">Create new post</button>
              </div>
            </div>
          </form>
        </div>
      </section>

      <div id="notification" class="notification is-hidden">
        <button class="delete"></button>
        Post created at <a></a>
      </div>

      <div id="modal" class="modal">
        <div class="modal-background"></div>
        <div class="modal-card">
          <header class="modal-card-head">
            <p class="modal-card-title">Insert image</p>
            <button class="delete" aria-label="close"></button>
          </header>
          <section class="modal-card-body">
            <div class="file has-name is-fullwidth is-right">
              <label class="file-label">
                <input class="file-input" type="file" accept="image/*" name="image" id="file-upload">
                <span class="file-cta">
                  <span class="file-icon">
                    <i class="fas fa-upload"></i>
                  </span>
                  <span class="file-label">
                    Choose a fileâ€¦
                  </span>
                </span>
                <span id="file-name" class="file-name"></span>
              </label>
            </div>
          </section>
          <footer class="modal-card-foot">
            <button id="do-upload" class="button is-success">Upload & Insert</button>
            <button class="button">Cancel</button>
          </footer>
        </div>
      </div>


    {{ else }}
      <section class="section">
        <div class="container has-text-centered">
          <a class="button" href="{{.AdminURL}}sign-in">Sign-in</a>
        </div>
      </section>
    {{ end }}

    <script src="https://unpkg.com/pell"></script>
    <script>
      const tabs = document.querySelectorAll('.tabs li');
      const tabbed = document.querySelectorAll('.tabbed');

      window.onhashchange = function () {
        const hash = window.location.hash;

        for (const tab of tabs) {
          tab.classList.remove('is-active');

          if (tab.firstChild.hash === hash) {
            tab.classList.add('is-active');
          }
        }

        for (const container of tabbed) {
          container.classList.add('is-hidden');

          if (container.id === hash.slice(1)) {
            container.classList.remove('is-hidden');
          }
        }
      }

      window.onhashchange();

      if (!window.location.hash) {
        window.location.hash = tabs[0].firstChild.hash;
      }

      const fileUpload = document.getElementById('file-upload');

      fileUpload.onchange = function() {
        if (fileUpload.files.length === 1) {
          document.getElementById('file-name').textContent = fileUpload.files[0].name;
        }
      };

      const content = document.getElementById('post_content');
      const editor = document.getElementById('editor');
      const notification = document.getElementById('notification');
      const modal = document.getElementById('modal');

      const doUpload = document.getElementById('do-upload');

      doUpload.onclick = function() {
        const formData = new FormData();

        formData.append('file', fileUpload.files[0]);

        fetch('{{ .Media }}', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${ editorForm.elements['access_token'].value }`,
          },
          body: formData,
        })
          .then(resp => {
            const location = resp.headers.get('Location');
            pell.exec('insertImage', location);
            modal.classList.remove('is-active');
          })
          .catch(err => console.warn(err));
      };

      pell.init({
        element: editor,
        defaultParagraphSeparator: 'p',
        onChange(data) {
          content.value = data;
        },
        actions: [
          'bold',
          'italic',
          'underline',
          'strikethrough',
          'heading1',
          'heading2',
          'paragraph',
          'quote',
          'olist',
          'ulist',
          'code',
          'line',
          'link',
          {
            name: 'image',
            icon: '&#128247;',
            title: 'Image',
            result: () => modal.classList.add('is-active'),
          },
          {
            name: 'clear',
            icon: '-',
            title: 'Clear formatting',
            result: () => pell.exec('removeFormat'),
          },
        ],
      });

      const editorForm = document.getElementById('editorform');

      editorform.addEventListener('submit', function(e) {
        e.preventDefault();

        fetch('{{ .Micropub }}', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${ editorForm.elements['access_token'].value }`,
          },
          body: JSON.stringify({
            type: ['h-entry'],
            properties: {
              name: [editorForm.elements['name'].value],
              content: [
                { html: editorForm.elements['content'].value },
              ],
            },
          }),
        })
          .then(resp => {
            if (resp.status === 201) {
              const a = notification.querySelector('a');
              a.textContent = resp.headers.get('Location');
              a.href = resp.headers.get('Location');

              notification.classList.remove('is-hidden');
            } else {
              console.log('There was a problem', resp);
            }
          });
      });

      notification.querySelector('.delete').onclick = function() {
        notification.classList.add('is-hidden');
      }

    </script>

  </body>
</html>
